name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events
  push:
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to build'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - macos
          - ios
      xcode_version:
        description: 'Xcode version to use (leave empty for default)'
        required: false
        type: string
      upload_artifacts:
        description: 'Upload build artifacts'
        required: true
        default: true
        type: boolean
      use_legacy_build:
        description: 'Include legacy macOS-13 build'
        required: true
        default: false
        type: boolean
      create_release:
        description: 'Create a release (requires tag name)'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag name (e.g., v1.2.3)'
        required: false
        type: string

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
# See the following, which includes links to supported macOS versions, including supported Xcode versions
# https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners/about-github-hosted-runners#supported-runners-and-hardware-resources
jobs:
  build:
    strategy:
      matrix:
        # Primary build on latest macOS and its default Xcode version
        os: [ "macos-latest" ]
        platform: [ "all", "macos", "ios" ]
        upload_artifacts: [ true ]
        select_xcode: [ false ]

        # Legacy build. Up to 3 versions behind latest (or beta).
        include:
          - os: "macos-13"
            xcode: "14.3.1"
            platform: "macos"
            upload_artifacts: false
            select_xcode: true
      fail-fast: false

    name: 'MoltenVK (Xcode ${{ matrix.xcode }} - ${{ matrix.platform }})'
    
    runs-on: ${{ matrix.os }}
    
    env:
      XCODE_DEV_PATH: "/Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer"

    steps:
      # Check if this job should run based on workflow_dispatch inputs
      - name: Check if job should run
        id: should_run
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # For workflow_dispatch, check input parameters
            if [[ "${{ github.event.inputs.platform }}" != "all" && "${{ github.event.inputs.platform }}" != "${{ matrix.platform }}" ]]; then
              echo "Skipping build - platform mismatch"
              echo "should_run=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            if [[ "${{ github.event.inputs.use_legacy_build }}" != "true" && "${{ matrix.os }}" == "macos-13" ]]; then
              echo "Skipping legacy build - not requested"
              echo "should_run=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          echo "should_run=true" >> $GITHUB_OUTPUT

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
        if: steps.should_run.outputs.should_run == 'true'

      # Python 3.12 removed distutils, which is used by glslang::update_glslang_sources.py called from fetchDependencies
      - uses: actions/setup-python@v5
        if: steps.should_run.outputs.should_run == 'true'
        with:
          python-version: '3.11'

      - name: List available Xcode versions
        if: steps.should_run.outputs.should_run == 'true'
        run: ls /Applications | grep Xcode

      - name: Select Xcode version
        if: steps.should_run.outputs.should_run == 'true' && (matrix.select_xcode == true || (github.event_name == 'workflow_dispatch' && github.event.inputs.xcode_version != ''))
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.xcode_version }}" != "" ]]; then
            sudo xcode-select -switch "/Applications/Xcode_${{ github.event.inputs.xcode_version }}.app/Contents/Developer"
          else
            sudo xcode-select -switch "${XCODE_DEV_PATH}"
          fi

      - name: Prep
        id: prep
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          echo "Get Xcode version info"
          XCODE_VERSION="$(xcodebuild -version)"
          echo "${XCODE_VERSION}"
          XCODE_VERSION="$(echo "${XCODE_VERSION}" | tr '\t\r\n ' '_')"
          echo "${XCODE_VERSION}"
          echo "XCODE_VERSION=${XCODE_VERSION}" >> $GITHUB_OUTPUT

      - name: Cache Dependencies
        id: cache-dependencies
        if: steps.should_run.outputs.should_run == 'true' && success() && !(github.event_name == 'push' && contains(github.ref, 'refs/tags/')) # never cache dependencies for pushed tags
        uses: actions/cache@v3
        with:
          path: |
            External/build
            !External/build/Intermediates
          key: ${{ runner.os }}-${{ steps.prep.outputs.XCODE_VERSION }}-${{ matrix.platform }}-${{ hashFiles('fetchDependencies','ExternalRevisions/**','ExternalDependencies.xcodeproj/**','Scripts/**') }}

      - name: Fetch Dependencies (Use Built Cache)
        if: steps.should_run.outputs.should_run == 'true' && steps.cache-dependencies.outputs.cache-hit == 'true'
        run: |
          ./fetchDependencies -v --none

      - name: Fetch Dependencies
        if: steps.should_run.outputs.should_run == 'true' && steps.cache-dependencies.outputs.cache-hit != 'true'
        run: |
          ./fetchDependencies -v --${{ matrix.platform }}

      - name: Output Dependency Build Logs on Failure
        if: steps.should_run.outputs.should_run == 'true' && failure()
        run: cat "dependenciesbuild.log"

      - name: Build MoltenVK
        if: steps.should_run.outputs.should_run == 'true'
        run: |
          make ${{ matrix.platform }}

      - name: Output MoltenVK Build Logs on Failure
        if: steps.should_run.outputs.should_run == 'true' && failure()
        run: |
          if [ -f "xcodebuild.log" ]; then
            cat "xcodebuild.log"
          fi

      - name: Tar Artifacts
        if: steps.should_run.outputs.should_run == 'true' && success() && (matrix.upload_artifacts == true || (github.event_name == 'workflow_dispatch' && github.event.inputs.upload_artifacts == 'true'))
        # See: https://github.com/actions/upload-artifact#maintaining-file-permissions-and-case-sensitive-files
        # To reduce artifact size, don't include any stand-alone shader converter binaries.
        run: |
          rm -rf Package/Release/MoltenVKShaderConverter
          tar -C Package -s/Release/MoltenVK/ -cvf "MoltenVK-${{ matrix.platform }}.tar" Release/

      - name: Upload Artifacts
        if: steps.should_run.outputs.should_run == 'true' && success() && (matrix.upload_artifacts == true || (github.event_name == 'workflow_dispatch' && github.event.inputs.upload_artifacts == 'true'))
        uses: actions/upload-artifact@v4
        with:
          name: "MoltenVK-${{ matrix.platform }}"
          path: "MoltenVK-${{ matrix.platform }}.tar"

  release:
    name: 'Release'

    needs: [build]

    runs-on: ubuntu-latest

    if: ${{ startsWith(github.ref, 'refs/tags/') || (github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true') }}

    permissions:
      contents: write

    steps:
      - name: Validate manual release inputs
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.create_release == 'true' }}
        run: |
          if [[ -z "${{ github.event.inputs.release_tag }}" ]]; then
            echo "Error: release_tag is required when create_release is true"
            exit 1
          fi
          if [[ ! "${{ github.event.inputs.release_tag }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
            echo "Warning: release_tag should follow semantic versioning (e.g., v1.2.3)"
          fi

      - name: Download Artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          # Allow updating existing releases if the workflow is triggered by release creation or re-run.
          allowUpdates: true
          # When the release is updated, delete the existing artifacts for replacement.
          removeArtifacts: true
          # If a release is being replaced, omit updating the name and body.
          # Allows for creating a release and filling these in before the workflow runs.
          # Then, the workflow will populate the release with the artifacts.
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
          # Upload all MoltenVK CI artifacts as release assets.
          artifacts: "MoltenVK*/*"
          artifactErrorsFailBuild: true
          # Use manual tag if provided, otherwise extract from git ref
          tag: ${{ github.event.inputs.release_tag || github.ref_name }}
          # Create the tag if it doesn't exist (for manual dispatch)
          makeLatest: true
          generateReleaseNotes: true
